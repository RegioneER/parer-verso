<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"   
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
    
    <context:annotation-config/>
    <context:component-scan base-package="org.springframework.security.saml"/>
    <!-- Unsecured pages -->
    <security:http security="none" pattern="/font/**" />
    <security:http security="none" pattern="/pages/Logout.jsp" />
    <security:http security="none" pattern="/pro/logout" />
    <security:http security="none" pattern="/gfx/**" />
    <!-- rest service (no SAML auth) -->
    <security:http security="none" pattern="/admin/**" />
    

    <!-- *** AGGIUNTA PER SPID -->
    <!-- samlRelayState DEVE essere definito prima altrimenti non funziona nulla! -->
    <!-- Serve per far funzionare l'integrazione con FEDERA -->
    <bean id="spEntityId" class="java.lang.String">
        <constructor-arg value="#{ systemProperties['verso-sp-identity-id'] }"/>
    </bean>
    <!-- Estrae dall'entityId la parte dell'url del server e della porta escludendo l'ultimo slash -->
    <bean id="serverUrl" class="java.lang.String">
        <constructor-arg value="#{ spEntityId.substring(0, spEntityId.indexOf('/',9) ) }"/>
    </bean>
    <!-- Deve controllare che nell'entityId viene tornato così com'è altrimenti se c'è un alias lo toglie! -->
    <bean id="urlRitorno" class="java.lang.String">
        <constructor-arg value="#{  (spEntityId).indexOf('/saml/metadata')>0 ? (spEntityId).substring(0, (spEntityId).indexOf('/saml/metadata') ) : (spEntityId) }"/>
    </bean>
    <!-- Url di ritorno encodata in Base64 lo vuole federa! -->
    <bean id="samlRelayState" class="java.lang.String">
        <constructor-arg value="#{ T(java.util.Base64).getEncoder().encodeToString( ( urlRitorno  ).getBytes()) }"/>
    </bean>
    <!-- SpagoLite User detail bean Spostato qui e viene usato nel baseContext.xml -->
    <bean id="sliteUserDetail" class="it.eng.parer.simparer.security.VersoSAMLUserDetail" />
    <!-- *** FINE AGGIUNTA PER SPID -->

    <!-- common settings -->
    <import resource="classpath:security/baseSecurityContext.xml"/>

    <bean id="csrfMatcher"
              class="org.springframework.security.web.util.matcher.OrRequestMatcher">
        <constructor-arg>
            <list
                value-type="org.springframework.security.web.util.matcher.RequestMatcher">
                <bean
                    class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
                    <constructor-arg name="pattern" value="/pro/**" />
                    <constructor-arg name="httpMethod" value="POST" />
                </bean>
                <bean
                    class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
                    <constructor-arg name="pattern" value="/pro/**" />
                    <constructor-arg name="httpMethod" value="PUT" />
                </bean>
                <bean
                    class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
                    <constructor-arg name="pattern" value="/pro/**" />
                    <constructor-arg name="httpMethod" value="DELETE" />
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <!-- Override : Handler for successful logout -->
    <bean id="successLogoutHandler" class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
        <property name="defaultTargetUrl" value="/pages/Logout.jsp" />
    </bean>

    <!-- Central storage of cryptographic keys -->
    <bean id="keyManager" class="org.springframework.security.saml.key.JKSKeyManager">
        <constructor-arg value="file:///#{systemProperties['verso-jks-path']}" />
        <constructor-arg type="java.lang.String" value="#{systemProperties['verso-key-manager-pass']}" />
        <constructor-arg>
            <map>
                <entry key="#{systemProperties['verso-store-key-name']}" value="#{systemProperties['verso-key-manager-pass']}" />
            </map>
        </constructor-arg>
        <constructor-arg type="java.lang.String" value="verso" />
    </bean>

    <!-- IDP Metadata configuration - paths to metadata of IDPs in circle of trust is here -->
    <!-- Do no forget to call iniitalize method on providers -->
    <bean id="metadata" class="it.eng.spagoLite.security.saml.ReloadableCachingMetadataManager">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
                    <constructor-arg>
                        <bean class="org.opensaml.saml2.metadata.provider.FileBackedHTTPMetadataProvider">
                            <!-- URL containing the metadata -->
                            <constructor-arg>
                                <value type="java.lang.String">#{systemProperties['fed-metadata-url']}</value>
                            </constructor-arg>
                            <!-- Timeout per la connessione durante una richiesta di metadati (in ms) -->
                            <constructor-arg>
                                <value type="int">#{systemProperties['verso-timeout-metadata']}</value>
                            </constructor-arg>
                            <constructor-arg>
                                <value type="java.lang.String">#{systemProperties['verso-temp-file']}</value>
                            </constructor-arg>
                            <property name="parserPool" ref="parserPool" />
                        </bean>
                    </constructor-arg>
                    <!-- 
                         Java Cert Store contentente:
                          - il certificato della federazione 
                          - la coppia di chiavi pubblica e privata di verso 
                    -->
                    <constructor-arg>
                        <map>
                            <entry key="#{systemProperties['verso-sp-identity-id']}">
                                <bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
                                    <property name="local" value="true" />
                                    <property name="alias" value="verso" />
                                    <property name="securityProfile" value="pkix" />
                                    <property name="sslSecurityProfile" value="pkix" />
                                    <property name="signingKey" value="#{systemProperties['verso-store-key-name']}" />
                                    <property name="encryptionKey" value="#{systemProperties['verso-store-key-name']}" />
                                    <property name="requireArtifactResolveSigned" value="true" />
                                    <property name="requireLogoutRequestSigned" value="true" />
                                    <property name="requireLogoutResponseSigned" value="false" />
                                    <!-- **** CAMBIATI QUESTI !!!! *** -->
                                    <property name="idpDiscoveryEnabled" value="#{ systemProperties['discovery-service-enabled'] == null ? 'false' :  systemProperties['discovery-service-enabled'] }"/>
                                    <!-- ************************************** -->
                                </bean>
                            </entry>
                            <entry key="#{systemProperties['idp-identity-id']}">
                                <bean class="org.springframework.security.saml.metadata.ExtendedMetadata"/>
                            </entry>
                        </map>
                    </constructor-arg>
                </bean>
            </list>
        </constructor-arg>
        <!-- OPTIONAL used when one of the metadata files contains information about this service provider -->
        <property name="hostedSPName" value="#{systemProperties['verso-sp-identity-id']}"/>
        <!-- OPTIONAL property: can tell the system which IDP should be used for authenticating user by default. -->
        <property name="defaultIDP" value="#{systemProperties['idp-identity-id']}" />
        <!-- Intervallo di refresh dei metadati -->
        <property name="refreshCheckInterval" value="#{systemProperties['verso-refresh-check-interval']}"/>
    </bean>

</beans>
